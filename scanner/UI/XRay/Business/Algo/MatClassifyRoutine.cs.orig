
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
// 
// Description: MatClassifyRoutine 类定义物质分类的处理逻辑    
// 输入数据：RawScanlineData
// 输出数据：ProcessedXRayLineData
// 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using UI.Common.Tracers;
using UI.XRay.Business.DataAccess.Config;
using UI.XRay.Business.Entities;
using UI.XRay.ImagePlant;
using UI.XRay.ImagePlant.Classify;

namespace UI.XRay.Business.Algo
{
    /// <summary>
    /// 物质分类计算处理逻辑：针对归一化后的数据，计算物质分类和数据融合
    /// </summary>
    public class MatClassifyRoutine
    {
        /// <summary>
        /// 视角1显示的能量数据类型
        /// </summary>
        private const ShowingEnergyType View1ShowingEnergy = ShowingEnergyType.Fused;

        /// <summary>
        /// 视角2显示的能量数据类型
        /// </summary>
        private const ShowingEnergyType View2ShowingEnergy = ShowingEnergyType.Fused;

        /// <summary>
        /// 物质分类器
        /// </summary>
        private readonly MaterialClassifier _view1Classifier;

        private readonly MaterialClassifier _view2Classifier;

        /// <summary>
        /// 高低能融合算法
        /// </summary>
        private HighLowEnergyFusion _fuser = new HighLowEnergyFusion();

        /// <summary>
        /// 等待处理的数据缓存，当缓存达到5列数据时，才开始进行处理
        /// </summary>
        LinkedList<ScanlineData> _view1LinesCache = new LinkedList<ScanlineData>();
        LinkedList<ScanlineData> _view2LinesCache = new LinkedList<ScanlineData>();

        /// <summary>
        /// 进行物质分类时的滤波窗口的大小
        /// </summary>
        private const int FilterWindowSize = 5;

        private const int HalfWindowSize = 2;

        private const string Mat1Str = "Mat.class";
        private const string Mat2Str = "Mat2.class";

        /// <summary>
        /// 构造物质分类逻辑
        /// </summary>
        public MatClassifyRoutine()
        {
            try
            {
                _view1Classifier = new MaterialClassifier();
                InitialViewClassifier(_view1Classifier,DetectViewIndex.View1);

                _view2Classifier = new MaterialClassifier();
                InitialViewClassifier(_view2Classifier,DetectViewIndex.View2);
            }
            catch (Exception exception)
            {
                Tracer.TraceException(exception, "Unexpected exception caught in MatClassifyLogic constructor.");
            }
        }

        #region 实现接口 IMatClassifyLogic

        private void InitialViewClassifier(MaterialClassifier classifier,DetectViewIndex viewIndex)
        {
            int viewClassifyIndex;

            string configPath = viewIndex == DetectViewIndex.View1
                ? ConfigPath.ImagesImage1Classification
                : ConfigPath.ImagesImage2Classification;

            if (!ScannerConfig.Read(configPath, out viewClassifyIndex))
            {
                viewClassifyIndex = viewIndex == DetectViewIndex.View1 ? 1 : 2;
            }

            // 从配置文件中读取穿不透阈值及背景阈值
            classifier.UnPenetratableUpper = 3000;
            classifier.BackgroundLower = 64000;

            // 从配置中读取物质分类文件的名称
            string matFileName;

            switch (viewClassifyIndex)
            {
                case 1:
                    matFileName = Mat1Str;
                    break;
                case 2:
                    matFileName = Mat2Str;
                    break;
                default:
                    matFileName = Mat1Str;
                    break;
            }

            var fullPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, matFileName);
            using (var stream = new FileStream(fullPath, FileMode.Open, FileAccess.Read, FileShare.Read, 1024000))
            {
                LoadMatClassLut(classifier, stream);
            }
        }

        /// <summary>
        /// 从指定的流中读取物质分类查找表
        /// </summary>
        /// <param name="classifier"></param>
        /// <param name="matClassStream">包含物质分类查找表的流</param>
        public void LoadMatClassLut(MaterialClassifier classifier,Stream matClassStream)
        {
            classifier.LoadMatClassLutFromStream(matClassStream);
        }

        /// <summary>
        /// 分类及融合结束后，向外传递结果
        /// </summary>
        public event EventHandler<ClassifiedLineDataBundle> ScanlineClassified;

        /// <summary>
        /// 对一线数据进行物质分类，并进行融合
        /// </summary>
        /// <param name="bundle">要进行物质分类与融合的一线数据</param>
        public void ClassifyBundle(ScanlineDataBundle bundle)
        {
            if (bundle.View1LineData != null)
            {
                _view1LinesCache.AddLast(bundle.View1LineData);
            }

            if (bundle.View2LineData != null)
            {
                _view2LinesCache.AddLast(bundle.View2LineData);
            }

            // 分别对视角1和视角2的数据同步进行分类和融合
            ClassifiedLineData view1Result = null, view2Result = null;

            if (_view1LinesCache.Count >= FilterWindowSize)
            {
                view1Result = ClassifyAndFuse(_view1Classifier,_view1LinesCache, View1ShowingEnergy);
                _view1LinesCache.RemoveFirst();
            }

            if (_view2LinesCache.Count >= FilterWindowSize)
            {
                view2Result = ClassifyAndFuse(_view2Classifier,_view2LinesCache, View2ShowingEnergy);
                _view2LinesCache.RemoveFirst();
            }

            // 只要有一视角的结果数据，都向外传递
            if (view1Result != null || view2Result != null)
            {
                var handler = ScanlineClassified;
                if (handler != null)
                {
                    handler(this, new ClassifiedLineDataBundle(view1Result, view2Result));
                }
            }
        }

        #endregion

        /// <summary>
        /// 对5列数据进行分类和融合，只处理中间的一列，其他的四列用于滤波
        /// </summary>
        /// <param name="classifier"></param>
        /// <param name="lines">输入的线数必须是5线</param>
        /// <param name="showingEnergyType"></param>
        /// <returns></returns>
        private ClassifiedLineData ClassifyAndFuse(MaterialClassifier classifier, LinkedList<ScanlineData> lines, ShowingEnergyType showingEnergyType)
        {
            // 分别取低能和高能的数据
            var list = lines.ToList();

            // 取中间的一线数据作为原始数据
            var sourceLine = list[HalfWindowSize];

            // 分别取低能和高能数据
            var leLines = list.Select(data => data.Low).ToList();

            List<ushort[]> heLines = null;
            if (sourceLine.High != null) 
                heLines = list.Select(data => data.High).ToList();

            ushort[] material = null;
            ushort[] showingGray = null;

            // 如果高能数据不为空，则进行物质分类
            if (heLines != null && classifier != null)
            {
                classifier.ClassifyMidLine(leLines, heLines, out material);
            }
            else
            {
                // 如果高能数据为空，则无法进行物质分类，将物质分类全部初始化为0
                material = new ushort[sourceLine.LineLength];
            }
            return new ClassifiedLineData(sourceLine.ViewIndex, sourceLine.Fused, null, material,sourceLine.Low,sourceLine.High);
            /*
            // 以下对数据进行融合

            // 对于双能量数据，可以进行高低能融合
            if (showingEnergyType == ShowingEnergyType.Fused && 
                sourceLine.XRaySensor == XRaySensorType.Dual)
            {
                _fuser.Fuse(sourceLine.Low, sourceLine.High, out showingGray);
            }
            else if (showingEnergyType == ShowingEnergyType.High && sourceLine.High != null)
            {
                // 显示高能数据
                showingGray = new ushort[sourceLine.LineLength];
                sourceLine.High.CopyTo(showingGray, 0);
            }
            else
            {
                // 对于其他情况，都显示低能，因为按照协议，低能数据肯定不能为空
                showingGray = new ushort[sourceLine.LineLength];
                sourceLine.Low.CopyTo(showingGray, 0);
            }

            return new ClassifiedLineData(sourceLine.ViewIndex, showingGray, material);
            */
        }

        public void ClearLinesCache()
        {
            _view1LinesCache.Clear();
            _view2LinesCache.Clear();
        }
        /// <summary>
        /// 分类和融合
        /// </summary>
        /// <param name="bundle"></param>
        /// <returns></returns>
        //public ClassifiedLineDataBundle ClassifyBundle(ScanlineDataBundle bundle)
        //{
        //    ClassifiedLineData view1 = null, view2 = null;

        //    _linesCache[0] = null;
        //    if (bundle.View1LineData != null)
        //    {
        //        view1 = ClassifyAndFuse(bundle.View1LineData, View1ShowingEnergy);
        //    }

        //    if (bundle.View2LineData != null)
        //    {
        //        view2 = ClassifyAndFuse(bundle.View2LineData, View2ShowingEnergy);
        //    }

        //    return new ClassifiedLineDataBundle(view1, view2); 
        //}

        /// <summary>
        /// 根据低能、高能数据及要输出的数据类型定义，获取最终显示的数据
        /// </summary>
        /// <param name="lineData">某视角的归一化后的一线数据，包括高能、低能</param>
        /// <param name="showingEnergyType">要输出显示的能量数据类型</param>
        /// <returns></returns>
        //private ClassifiedLineData ClassifyAndFuse(XRayLineData lineData, EnergyType showingEnergyType)
        //{
        //    ushort[] showingData = null;
        //    ushort[] material = null;

        //    if (showingEnergyType == EnergyType.LE)
        //    {
        //        showingData = new ushort[lineData.Low.Length];
        //        lineData.Low.CopyTo(showingData, 0);
        //    }
        //    else if(showingEnergyType == EnergyType.HE && lineData.High != null)
        //    {
        //        showingData = new ushort[lineData.High.Length];
        //        lineData.High.CopyTo(showingData, 0);
        //    }
        //    else if (showingEnergyType == EnergyType.Fusion && lineData.High != null)
        //    {
        //        showingData = new ushort[lineData.High.Length];

        //        if (_fuser != null)
        //        {
        //            _fuser.Fuse(lineData.Low, lineData.High, showingData);
        //        }
        //    }

        //    // 防御性措施：防止用户对单能设备配置为融合显示
        //    if (showingData == null)
        //    {
        //        showingData = new ushort[lineData.Low.Length];
        //        lineData.Low.CopyTo(showingData, 0);
        //    }

        //    if (lineData.High != null && lineData.Low != null)
        //    {
        //        Classify(lineData.Low, lineData.High, out material);
        //    }

        //    return new ClassifiedLineData(lineData.ViewIndex, showingData, material);
        //}

        ///// <summary>
        ///// Todo: 实现物质分类的逻辑
        ///// </summary>
        ///// <param name="le"></param>
        ///// <param name="he"></param>
        ///// <param name="material"></param>
        //private void Classify(ushort[] le, ushort[] he, out ushort[] material)
        //{
        //    _classifier.ClassifyMidLine(le, he, out material);
        //}

    }
}
