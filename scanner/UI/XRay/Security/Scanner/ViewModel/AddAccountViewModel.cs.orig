using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using GalaSoft.MvvmLight;
using GalaSoft.MvvmLight.Command;
using UI.XRay.Business.DataAccess;
using UI.XRay.Business.DataAccess.Db;
using UI.XRay.Business.Entities;
using UI.XRay.Flows.Controllers;
using UI.XRay.Flows.Services.Db;
using UI.XRay.Gui.Framework;
using UI.XRay.Security.Scanner.ViewModel.Setting.Account;
using UI.XRay.Flows.Services;

namespace UI.XRay.Security.Scanner.ViewModel
{
    public class AddAccountViewModel : ViewModelBase
    {
        public RelayCommand AddCommand { get; set; }

        public RelayCommand CancelCommand { get; set; }
        public RelayCommand KeyboardCommand { get; set; }
        public RelayCommand<KeyEventArgs> PreviewKeyDownEventCommand { get; set; }

        private bool _isAddButtonEnabled;

        /// <summary>
        /// 添加按钮是否可用
        /// </summary>
        public bool IsAddButtonEnabled
        {
            get { return _isAddButtonEnabled; }
            set { _isAddButtonEnabled = value;RaisePropertyChanged(); }
        }

        private string _accountId;

        public string AccountId
        {
            get { return _accountId; }
            set
            {
                _accountId = value;
                IsAddButtonEnabled = !string.IsNullOrEmpty(_accountId.Trim());

                if (!string.IsNullOrWhiteSpace(_accountId))
                {
                    _accountId = _accountId.Replace("_", "");
                }

                RaisePropertyChanged();
            }
        }

        private string _password;

        public string Password
        {
            get { return _password; }
            set { _password = value; RaisePropertyChanged(); }
        }

        private AccountRole _role;

        public AccountRole Role
        {
            get { return _role; }
            set
            {
                _role = value;
                RaisePropertyChanged();
            }
        }

        private Visibility _idDuplicatedTextVisibility;

        /// <summary>
        /// 用户Id重复的提示性文字是否可见
        /// </summary>
        public Visibility IdDuplicatedTextVisibility
        {
            get { return _idDuplicatedTextVisibility; }
            set { _idDuplicatedTextVisibility = value;RaisePropertyChanged(); }
        }

        public ObservableCollection<AccountRoleEnumString> AvailableAccountTypes { get; private set; }

        private AccountDbSet _manager;

        public AddAccountViewModel()
        {
            AddCommand = new RelayCommand(AddCommandExecute);
            CancelCommand = new RelayCommand(CancelCommandExecute);
            PreviewKeyDownEventCommand = new RelayCommand<KeyEventArgs>(PreviewKeyDownEventCommandExecute);
            KeyboardCommand = new RelayCommand(KeyboardCommandExecute);
            _manager = new AccountDbSet();

            // 当前登陆的是管理员，则可以添加操作员
            AvailableAccountTypes = AccountRoleStringsProvider.GetManageableRoleStringPairList();

            //默认用户级别为操作员
            Role = AccountRole.Operator;

            Password = Business.Entities.Account.DefaultPassword;

            IdDuplicatedTextVisibility = Visibility.Hidden;
        }

        private void PreviewKeyDownEventCommandExecute(KeyEventArgs args)
        {
            switch (args.Key)
            {
                case Key.F1:
                case Key.Enter:
                    if (IsAddButtonEnabled)
                    {
                        AddCommandExecute();
                    }
                    args.Handled = true;
                    break;

                    case Key.F3:
                case Key.Escape:
                    CancelCommandExecute();
                    args.Handled = true;
                    break;
            }
        }

        private void AddCommandExecute()
        {
            try
            {
                if (!IsAddButtonEnabled)
                {
                    return;
                }

                // 获取所有用户，并进行对比，判断要添加的用户是否已经存在于数据库中
                var all = _manager.SelectAll();
                if (all != null)
                {
                    if (all.Exists(
                            account => string.Equals(account.AccountId, AccountId, StringComparison.OrdinalIgnoreCase)))
                    {
                        IdDuplicatedTextVisibility = Visibility.Visible;
                        return;
                    }
                }

                // 将新用户发送至用户管理视图
                this.MessengerInstance.Send(new AccountMessage(new Account(AccountId, Password, Role, true)));
            }
            catch (Exception ex)
            {
                
            }
            
        }

        private void KeyboardCommandExecute()
        {
            TouchKeyboardService.Service.OpenKeyboardWindow("HXkeyboard");
        }

        private void CancelCommandExecute()
        {
            this.MessengerInstance.Send(new AccountMessage(null));
        }
    }
}
